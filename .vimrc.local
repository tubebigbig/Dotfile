call plug#begin('~/.vim/plugged')
Plug 'scrooloose/syntastic'
" Plug 'dense-analysis/ale'
Plug 'tpope/vim-fugitive'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'rust-lang/rust.vim'
"Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'evanleck/vim-svelte', {'branch': 'main'}
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
call plug#end()

source ~/.vim/normal.vim
source ~/.vim/mapping.vim
source ~/.vim/statusline.vim

set autowrite

" snip
" let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-t>b"
"let g:UltiSnipsJumpBackwardTrigger="<c-t>z"

" coc
let g:coc_global_extensions = [
      \'coc-prettier',
      \'coc-eslint',
      \'coc-tsserver',
      \'coc-rust-analyzer',
      \'coc-json',
      \'coc-css',
      \]
inoremap <silent><expr> <s-TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" ale
" let g:ale_linters_explicit = 1
" let g:ale_fix_on_save = 1
" let g:ale_linters = {
" \   'javascript': ['eslint'],
" \   'javascriptreact': ['eslint'],
" \   'typescriptreact': ['eslint', 'tslint'],
" \   'css': ['stylelint'],
" \}
" let g:ale_fixers = {
" \   '*': ['remove_trailing_lines', 'trim_whitespace'],
" \   'javascript': ['prettier', 'eslint'],
" \   'javascriptreact': ['prettier', 'eslint'],
" \   'typescriptreact': ['prettier', 'eslint'],
" \   'css': ['stylelint', 'prettier']
" \}
